<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-09T19:28:33+08:00</updated><id>http://localhost:4000/</id><title type="html">Mr.Nyanko</title><subtitle>Hao Qiang's Bolg</subtitle><author><name>Hao Qiang</name></author><entry><title type="html">垃圾收集器与内存分配策略</title><link href="http://localhost:4000/resources/java-gc.html" rel="alternate" type="text/html" title="垃圾收集器与内存分配策略" /><published>2018-03-05T00:00:00+08:00</published><updated>2018-03-05T00:00:00+08:00</updated><id>http://localhost:4000/resources/java-gc</id><content type="html" xml:base="http://localhost:4000/resources/java-gc.html">&lt;p&gt;收集算法是内存回收的方法论，垃圾收集器则是内存回收的具体实现。&lt;/p&gt;

&lt;p&gt;下图展示了7种作用于不同年代的收集器，两个收集器存在连线，则说明它们可以搭配使用。虚拟机所处的区域则表示它是属于新生代还是老年代的收集器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/java-gc-1.png&quot; alt=&quot;java-gc-1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;【Serial收集器】：Serial收集器是最基本，发展历史最悠久的收集器。
    &lt;ul&gt;
      &lt;li&gt;新生代收集器，采用复制算法&lt;/li&gt;
      &lt;li&gt;单线程收集&lt;/li&gt;
      &lt;li&gt;会发生“Stop-The-World”&lt;/li&gt;
      &lt;li&gt;是运行在Client模式下的默认新生代收集器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;【ParNew收集器】：ParNew收集器是Serial收集器的多线程版本。
    &lt;ul&gt;
      &lt;li&gt;新生代收集器，采用复制算法&lt;/li&gt;
      &lt;li&gt;多线程收集&lt;/li&gt;
      &lt;li&gt;会发生“Stop-The-World”&lt;/li&gt;
      &lt;li&gt;是运行在Server模式下的默认新生代收集器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;【Parallel Scavenge收集器】：与ParNew很相似，不同之处是吞吐量优先的收集器。自适应调节策略是Parallel Scavenge收集器与ParNew收集器的一个重要区别。
    &lt;ul&gt;
      &lt;li&gt;新生代收集器，采用复制算法&lt;/li&gt;
      &lt;li&gt;多线程收集&lt;/li&gt;
      &lt;li&gt;会发生“Stop-The-World”&lt;/li&gt;
      &lt;li&gt;吞吐量优先&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;【Serial Old收集器】：Serial Old收集器是Serial收集器的老年代版本。
    &lt;ul&gt;
      &lt;li&gt;老年代收集器，采用标记-整理算法&lt;/li&gt;
      &lt;li&gt;单线程收集&lt;/li&gt;
      &lt;li&gt;会发生“Stop-The-World”&lt;/li&gt;
      &lt;li&gt;在Client模式下使用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;【Parallel Old收集器】：是Parallel Scavenge收集器的老年代版本
    &lt;ul&gt;
      &lt;li&gt;老年代收集器，采用标记-整理算法&lt;/li&gt;
      &lt;li&gt;多线程收集&lt;/li&gt;
      &lt;li&gt;会发生“Stop-The-World”&lt;/li&gt;
      &lt;li&gt;吞吐量优先&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;【CMS收集器】：CMS收集器是一种以获取最短回收停顿时间为目标的收集器。
    &lt;ul&gt;
      &lt;li&gt;老年代收集器，采用标记-清除算法&lt;/li&gt;
      &lt;li&gt;初始标记、并发标记、重新标记、并发清除&lt;/li&gt;
      &lt;li&gt;初始标记和重新标记会“Stop-The-World”&lt;/li&gt;
      &lt;li&gt;缺点：对CPU资源敏感、无法处理浮动垃圾（易触发Full GC）、大量空间碎片产生&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;【G1收集器】：G1是一款面向服务端应用的垃圾收集器。
    &lt;ul&gt;
      &lt;li&gt;并行与并发、通过使用多个CPU来缩短“Stop-the-World“的时间&lt;/li&gt;
      &lt;li&gt;分代收集&lt;/li&gt;
      &lt;li&gt;空间整合&lt;/li&gt;
      &lt;li&gt;可预测的停顿&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>郝强</name></author><category term="resources" /><category term="java based" /><summary type="html">收集算法是内存回收的方法论，垃圾收集器则是内存回收的具体实现。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/java-gc-0.jpeg" /></entry><entry><title type="html">Java内存区域与内存溢出异常</title><link href="http://localhost:4000/resources/java-space.html" rel="alternate" type="text/html" title="Java内存区域与内存溢出异常" /><published>2018-03-01T00:00:00+08:00</published><updated>2018-03-01T00:00:00+08:00</updated><id>http://localhost:4000/resources/java-space</id><content type="html" xml:base="http://localhost:4000/resources/java-space.html">&lt;h2 id=&quot;java内存区域&quot;&gt;Java内存区域&lt;/h2&gt;
&lt;p&gt;Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁时间。
&lt;img src=&quot;../assets/img/java-space-1.png&quot; alt=&quot;java-space-1&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;【程序计数器】：是一块较小的内存空间，可以看作是当前线程所执行的字节码行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值，来选取下一条需要执行的字节码指令。&lt;/p&gt;

    &lt;p&gt;由于Java虚拟机的多线程是通过线程轮流切换并分配处理器的执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后，能够恢复到正确的执行位置，每条线程都需要一个独立的线程计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。&lt;/p&gt;

    &lt;p&gt;此内存区域是唯一一个在Java虚拟机规范中没有规定任何&lt;code class=&quot;highlighter-rouge&quot;&gt;OutOfMemoryError&lt;/code&gt;情况的区域。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【Java虚拟机栈】：与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期和线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行同时都会创建一个栈帧用于存储局部变量表，操作数栈，动态链接，方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。&lt;/p&gt;

    &lt;p&gt;经常有人把Java内存区分为对内存和栈内存，这种分法比较粗糙，Java内存区域的划分实际上远比这复杂。这种划分方式的流行只能说明大多数程序员最关注的，与对象内存分配关系最密切的内存区域就是这两块。&lt;/p&gt;

    &lt;p&gt;在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机允许的深度，将抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;StackOverFlowError&lt;/code&gt;异常；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【本地方法栈】：本地方法栈与虚拟机方法栈所发挥的作用非常相似，他们之间的区别不过是虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到的Native方法服务。&lt;/p&gt;

    &lt;p&gt;与虚拟机栈一样，本地方法栈区域也会抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;StackOverFlowError&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;OutOfMemoryError&lt;/code&gt;异常。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【Java堆】：Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。次内存区的唯一目的就是存放对象实例。&lt;/p&gt;

    &lt;p&gt;Java堆是来及收集器管理的主要区域。从内存回收的角度来看，由于现代收集器基本都采用了分代收集算法，所以Java堆还可以细分为：新生代和老年代：再细致一点的有&lt;code class=&quot;highlighter-rouge&quot;&gt;Eden&lt;/code&gt;空间，&lt;code class=&quot;highlighter-rouge&quot;&gt;From Survivor&lt;/code&gt;空间、&lt;code class=&quot;highlighter-rouge&quot;&gt;To Servivor&lt;/code&gt;空间等。&lt;/p&gt;

    &lt;p&gt;当前主流的虚拟机都是可以扩展堆空间的，如果在堆中没有内存完成实例分配，并且也无法再扩展时，将会抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;OutOfMemoryError&lt;/code&gt;异常。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【方法区】：方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即使编译器编译后的代码等数据。&lt;/p&gt;

    &lt;p&gt;对于习惯在HotSpot虚拟机上开发，部署程序的开发者来说，很多人愿意把方法区称为“永久代”，本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久代来实现方法区而已，这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存。&lt;/p&gt;

    &lt;p&gt;根据Java虚拟机规范的规定，当方法区无法满足内存分配的需求时，将抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;OutOfMemoryError&lt;/code&gt;异常。&lt;/p&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java对象在heap中的状态&quot;&gt;Java对象在heap中的状态&lt;/h2&gt;
&lt;p&gt;Java对象在堆中的状态与垃圾回收紧密相关，关于垃圾回收后面会有专门的文章进行介绍。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;【可触及状态】：从根节点开始，可以搜索到这个对象，也就是说这个对象可以被访问到。&lt;/li&gt;
  &lt;li&gt;【可复活状态】：从根节点开始，无论如何也不能访问到这个对象，也就是说这个对象的所有引用都已经被释放，没有任何变量引用该对象了。
  但是该对象可能在&lt;code class=&quot;highlighter-rouge&quot;&gt;finalize()&lt;/code&gt;方法中被再次引用，从而复活。&lt;/li&gt;
  &lt;li&gt;【不可触及状态】：对象的引用都被释放了，并且在对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;finalize()&lt;/code&gt;方法中没有复活，这样的话，该对象就是不可触及状态。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于【不可触及状态】所有的对象都有&lt;code class=&quot;highlighter-rouge&quot;&gt;finalize()&lt;/code&gt;方法，并且该方法只执行一次，并且他的执行时间是随机的，一般在我们为变量赋值&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;之后执行。
如果我们在某个对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;finalize()&lt;/code&gt;方法中为他增加引用，那么该对象就会复活，但是我们再次将其赋值为&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;，将不会再执行&lt;code class=&quot;highlighter-rouge&quot;&gt;finalize()&lt;/code&gt;方法。&lt;/p&gt;

&lt;h2 id=&quot;outofmemory异常&quot;&gt;OutOfMemory异常&lt;/h2&gt;
&lt;p&gt;在Java虚拟机规范的描述中，除了程序计数器外，虚拟机内存的其他几个运行时区域都有发生OutOfMemory（OOM）的可能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;【Java堆益处】：Java堆用于存储对象实例，只要不断地创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量达到最大堆的容量限制后就会产生内存溢出异常。&lt;/p&gt;

    &lt;p&gt;Java堆内存的OOM异常是实际应用中常见的内存溢出异常情况。当出现Java堆内存溢出时，异常堆栈信息&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.OutOfMemoryError&lt;/code&gt;会跟着进一步提示&lt;code class=&quot;highlighter-rouge&quot;&gt;Java heap space&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;堆溢出重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢出（Memory OverFlow）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【虚拟机栈和本地方法栈溢出】：在Java虚拟机规范中描述了两种异常：如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;StackOverflowError&lt;/code&gt;异常；如果虚拟机再扩展栈时无法申请到足够的空间，则抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;OutOfMemoryError&lt;/code&gt;异常。一般情况下都会抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;StackOverflowError&lt;/code&gt;异常。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【方法区和运行时常量池溢出】：运行时常量池时方法区的一部分，因此&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>郝强</name></author><category term="resources" /><category term="java based" /><summary type="html">Java内存区域 Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁时间。 【程序计数器】：是一块较小的内存空间，可以看作是当前线程所执行的字节码行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值，来选取下一条需要执行的字节码指令。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/java-space-0.jpeg" /></entry><entry><title type="html">是时候祭出这张图了！</title><link href="http://localhost:4000/life/yehuimei.html" rel="alternate" type="text/html" title="是时候祭出这张图了！" /><published>2018-02-20T00:00:00+08:00</published><updated>2018-02-20T00:00:00+08:00</updated><id>http://localhost:4000/life/yehuimei</id><content type="html" xml:base="http://localhost:4000/life/yehuimei.html">&lt;p&gt;今天是正月初五。&lt;/p&gt;

&lt;p&gt;原本计划今天和老婆做高铁回家，结果初中同学Hht也正要去北京宜家买点儿家具，就决定搭Hht的便车一同去北京。因为时间比较充裕，我们就抱着郊游的心态，一路不慌不忙。&lt;/p&gt;

&lt;p&gt;从唐山到北京大概两个小时的车程吧，除了聊天，车内的BGM定是少不了的。我是很喜欢这种调调的，北京生活节奏比较快，即便是回到老家，也因为是过年，大多要串亲戚，拜年之类的，也没有什么休假的感觉。
Hht是我发小，从初中开始我们就是同学，一直到大学毕业，再到后来一同到北京闯荡，这一晃也有15年了。他现在回到老家也有了自己得意的工作，我则是留在了北京。
近几年大家工作也都很忙，平时聊天的机会也是很少。因此我们这一路也是有说不完的话题，BGM也是一首接着一首不停的变换。随之音响里传出了熟悉的前奏，正是周杰伦的《晴天》。我和我老婆，包括Hht都是Jay的歌迷。
我们不再继续聊天，而是静静的聆听这首《晴天》。”故事的小黄花，从出生那年就飘着…“，熟悉歌词也一下把我的记忆拉回了我的初中时代。回忆起了那时的无忧无虑，回忆起了那时的青葱懵懂，回忆起了那时的自由自在…&lt;/p&gt;

&lt;p&gt;今年是戊戌年，这一年我30岁了。我不由得看了看坐在驾驶座操纵方向盘的Hht，又看了看后视镜中的自己，颇有些感触。自打2012年毕业来到北京，我在北京漂了也有5年了。相比之下，我可能比其他北漂要幸运的多，在房价还没有高的离谱的时候及时买了房子，同时也和老婆在17年结了婚。
今年是我们第一年回唐山过年，我笑称”这是一趟洗涤心灵的旅程”。这话其实不假，长时间的在北京的工作生活，使我看惯了冷漠，残忍，变得有些麻木。即便我时刻提醒自己要保持乐观，但是还是按捺不住心中的刻薄。
但是，一回到老家，就顿时体会到这些快要失去的人情味。&lt;/p&gt;

&lt;p&gt;回想起来，好几年没听过Jay的歌了，从初中到高中，他的每张CD我都会买，即便到了大学，也会在软件上不停的循环他的新专辑。但是从工作以后渐渐的不再听他的歌了，确切的说是不怎么听歌了。
我是很欣赏现在的Hht的，成熟又保留了年少时的洒脱，相比之下现在的我，油腻、刻薄，生活过的小心翼翼。事实上那时的我和Hht性格是很相像的，我们都喜欢《同一种调调》歌词中描写的”凡事要自己主导，决定穿什么外套，有专属的铃声讯号，很少笑、吃全麦的面包”的那种屌屌的生活态度。
我想这种”屌屌感”，大概是源于对自己的自信，却不是轻狂；源于对自由的向往，却不是放纵；源于对理想的崇拜，却不是盲目。不过从现实看来生活不光会磨平我们的棱角，还会切掉我们的”屌”。&lt;/p&gt;

&lt;p&gt;Jay原本是我最喜欢的歌手，《叶惠美》也是我最喜欢的专辑。但是如果这两年你问我，喜欢哪个歌手，哪张专辑，哪首歌（虽然现实中也几乎没有人关心你的喜好…），恐怕我真的答不上来。
感觉这些年，像是有一股力量，推着我不由自主的向前走，却不知道自己想要得到什么，也同时忘了自己喜欢什么，渐渐的也就迷失了自我…&lt;/p&gt;

&lt;p&gt;我想在这吵杂的城市中，有时候确实应该停下来等等灵魂…&lt;/p&gt;</content><author><name>郝强</name></author><category term="life" /><summary type="html">今天是正月初五。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/yehuimei-0.jpeg" /></entry><entry><title type="html">搭建Scala项目——play篇</title><link href="http://localhost:4000/documentation/scala-project-play.html" rel="alternate" type="text/html" title="搭建Scala项目——play篇" /><published>2018-01-28T00:00:00+08:00</published><updated>2018-01-28T00:00:00+08:00</updated><id>http://localhost:4000/documentation/scala-project-play</id><content type="html" xml:base="http://localhost:4000/documentation/scala-project-play.html">&lt;h2 id=&quot;关于play-framework&quot;&gt;关于Play Framework&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;「&lt;a href=&quot;https://www.playframework.com&quot;&gt;Play Framework&lt;/a&gt;」&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The High Velocity Web Framework For Java and Scala.Play Framework makes it easy to build web applications with Java &amp;amp; Scala.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;「Play Framework」&lt;/strong&gt;是一个轻量级的web框架，它主要的思路是让开发者简单便捷的搭建一个web应用。并且兼容Java和Scala两种语言。&lt;/p&gt;

&lt;p&gt;个人感觉现代的web框架基本上思路都大同小异。Java的web框架现在这么多，不过目前主流都离不开SSI。在使用层面上&lt;strong&gt;「Play Framework」&lt;/strong&gt;和&lt;strong&gt;「Spring Boot」&lt;/strong&gt;思路也比较接近。在&lt;strong&gt;「Spring Boot」&lt;/strong&gt;中封装好了许多的实用的插件，只要在&lt;strong&gt;「Maven」&lt;/strong&gt;中引入相应的插件，就可以方便的使用了。而在&lt;strong&gt;「Play Framework」&lt;/strong&gt;中有许多&lt;strong&gt;「&lt;a href=&quot;https://www.playframework.com/documentation/2.6.x/ModuleDirectory#play-modules&quot;&gt;module&lt;/a&gt;」&lt;/strong&gt;这些实用的模块也能很方便的引入和使用。总之都是为了把复杂的配置简单化，通过插件或者模块的形式，把需要的组件方便的引入到应用之中。不过对于Scala的支持上必然会选择&lt;strong&gt;「Play Framework」&lt;/strong&gt;。而如果选择Java作为开发语言，则更倾向于选择&lt;strong&gt;&lt;em&gt;“Spring全家桶”&lt;/em&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;##Play Starter Projects&lt;/p&gt;

&lt;p&gt;以前的&lt;strong&gt;「Play Framework」&lt;/strong&gt;提供了一个叫&lt;strong&gt;「activator」&lt;/strong&gt;的工具，当时觉得和&lt;strong&gt;「SBT」&lt;/strong&gt;有些重叠，估计官方也是觉得多此一举，因此现在已经抛弃了&lt;strong&gt;「activator」&lt;/strong&gt;。目前创建Play项目官方提供了两种方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从&lt;strong&gt;「&lt;a href=&quot;https://github.com/playframework/play-scala-starter-example/tree/2.6.x&quot;&gt;GitHub&lt;/a&gt;」&lt;/strong&gt;上下载到本地&lt;/li&gt;
  &lt;li&gt;如果在电脑上已经安装过了&lt;em&gt;SBT 0.13.13&lt;/em&gt;或者更高的版本那么可以通过sbt new命令创建一个Play的项目。（&lt;em&gt;&lt;a href=&quot;https://www.playframework.com/download&quot;&gt;详细步骤&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt;
  &lt;li&gt;之后运行&lt;code class=&quot;highlighter-rouge&quot;&gt;sbt run&lt;/code&gt;命令来启动项目。启动后则会出现以下页面。&lt;img src=&quot;../assets/img/scala-project-play-1.png&quot; alt=&quot;build-blog-jekyll-1&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-play-application-layout&quot;&gt;The Play application layout&lt;/h2&gt;

&lt;p&gt;比较重要的是先了解&lt;a href=&quot;https://www.playframework.com/documentation/2.6.x/Anatomy#the-play-application-layout&quot;&gt;The Play application layout&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app                      → Application sources
 └ assets                → Compiled asset sources
    └ stylesheets        → Typically LESS CSS sources
    └ javascripts        → Typically CoffeeScript sources
 └ controllers           → Application controllers
 └ models                → Application business layer
 └ views                 → Templates
build.sbt                → Application build script
conf                     → Configurations files and other non-compiled resources (on classpath)
 └ application.conf      → Main configuration file
 └ routes                → Routes definition
dist                     → Arbitrary files to be included in your projects distribution
public                   → Public assets
 └ stylesheets           → CSS files
 └ javascripts           → Javascript files
 └ images                → Image files
project                  → sbt configuration files
 └ build.properties      → Marker for sbt project
 └ plugins.sbt           → sbt plugins including the declaration for Play itself
lib                      → Unmanaged libraries dependencies
logs                     → Logs folder
 └ application.log       → Default log file
target                   → Generated stuff
 └ resolution-cache      → Info about dependencies
 └ scala-2.11
    └ api                → Generated API docs
    └ classes            → Compiled class files
    └ routes             → Sources generated from routes
    └ twirl              → Sources generated from templates
 └ universal             → Application packaging
 └ web                   → Compiled web assets
test                     → source folder for unit or functional tests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;官方对于Play应用的结构解释的很清楚了。个人觉得Play的文档要Spring的文档要清晰很多。毕竟Play比较新，而且把许多配置和API都简化了，找起来很方便。相比Spring的文档感觉是一坨放在那儿。都不知道从何看起…&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;这一篇主要是对&lt;strong&gt;「&lt;a href=&quot;https://www.playframework.com&quot;&gt;Play Framework&lt;/a&gt;」&lt;/strong&gt;有个简单的了解，更多的还是需要去看官方文档，再次&lt;strong&gt;「赞」&lt;/strong&gt;一下官方文档，写的真的很清晰。后续打算从SBT构建项目开始一步一步的写出一个可以使用的web应用。&lt;/p&gt;</content><author><name>郝强</name></author><category term="documentation" /><category term="scala-project" /><summary type="html">关于Play Framework 「Play Framework」:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/scala-project-play-0.jpeg" /></entry><entry><title type="html">搭建Scala项目——Slick篇</title><link href="http://localhost:4000/documentation/scala-project-slick.html" rel="alternate" type="text/html" title="搭建Scala项目——Slick篇" /><published>2018-01-24T00:00:00+08:00</published><updated>2018-01-24T00:00:00+08:00</updated><id>http://localhost:4000/documentation/scala-project-slick</id><content type="html" xml:base="http://localhost:4000/documentation/scala-project-slick.html">&lt;h2 id=&quot;关于slick&quot;&gt;关于Slick&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;「&lt;a href=&quot;http://slick.lightbend.com&quot;&gt;Slick&lt;/a&gt;」&lt;/strong&gt; (“Scala Language-Integrated Connection Kit”) is &lt;a href=&quot;https://lightbend.com/&quot;&gt;Lightbend&lt;/a&gt;’s Functional Relational Mapping (FRM) library for Scala that makes it easy to work with relational databases. It allows you to work with stored data almost as if you were using Scala collections while at the same time giving you full control over when database access happens and which data is transferred. You can also use SQL directly. Execution of database actions is done asynchronously, making Slick a perfect fit for your reactive applications based on &lt;a href=&quot;https://playframework.com/&quot;&gt;Play&lt;/a&gt; and &lt;a href=&quot;http://akka.io/&quot;&gt;Akka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;简单来说&lt;strong&gt;「Slick」&lt;/strong&gt;就是ORM，不过他提供的API是函数式的，所以是FRM。&lt;strong&gt;「Slick」&lt;/strong&gt;对于Play这种响应式应用是完美适配的，这也是我选择&lt;strong&gt;「Slick」&lt;/strong&gt;的原因。我们可以很方便的用Scala的语法来操作数据对象。&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;COFFEES&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;COF_NAME&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrimaryKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PRICE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffees&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TableQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Coffees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Query that only returns the &quot;name&quot; column
// Equivalent SQL: select NAME from COFFEES
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coffees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Query that limits results by price &amp;lt; 10.0
// Equivalent SQL: select * from COFFEES where PRICE &amp;lt; 10.0
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coffees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;用slick-codegen来生成数据映射&quot;&gt;用Slick codegen来生成数据映射&lt;/h2&gt;

&lt;p&gt;与&lt;strong&gt;「Mybatis」&lt;/strong&gt;的codegen用来生成带SQL模版的XML文件和Entity类似，&lt;strong&gt;「Slick」&lt;/strong&gt;也能通过codegen来生成Tables.scala文件。之前在「&lt;a href=&quot;http://localhost:4000/documentation/scala-project-slick.html&quot;&gt;搭建Scala项目——SBT篇&lt;/a&gt;」中已经创建了一个名叫&lt;strong&gt;「mrnyanko-model」&lt;/strong&gt;的module。这个module就是用来执行codegen task和生成数据对象。目录结构如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mrnyanko-model      → 项目的基目录
 └ project          → 元构建根项目的基目录
 └ src              → src目录
    └ main          → mian目录
      └ java        → Java文件目录
      └ resources   → 资源配置文件目录
      └ scala       → Scala文件目录
    └ test          → test目录
      └ java        → Java文件目录
      └ resources   → 资源配置文件目录
      └ scala       → Scala文件目录
 └ target           → target目录
 └ .gitignore       → git忽略文件配置
 └ build.sbt        → 项目build配置
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建build.sbt并引入需要的依赖：&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mrnyanko-model&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slickVersion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3.2.1&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;com.typesafe&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;config&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.3.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;com.typesafe.slick&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;slick&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slickVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;com.typesafe.slick&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;slick-codegen&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slickVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;org.slf4j&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;slf4j-nop&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.7.19&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;mysql&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mysql-connector-java&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5.1.38&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后在&lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt;目录下创建&lt;code class=&quot;highlighter-rouge&quot;&gt;application.conf&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;database.conf&lt;/code&gt;文件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application.conf&lt;/code&gt;文件主要定义了log级别：&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;logger.scala.slick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DEBUG&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;db.default.logSql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而在&lt;code class=&quot;highlighter-rouge&quot;&gt;database.conf&lt;/code&gt;文件中主要是用来定义一些数据库配置和生成的文件路径：&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;slick.driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;slick.jdbc.MySQLProfile&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;jdbc.driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;db.url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jdbc:mysql://localhost:3306/playscala&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;output.folder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mrnyanko-model/src/main/scala&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;pkg.name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mr.nyanko.playscala.models&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;db.user.name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;XXXXX&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;db.user.password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*************&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/scala&lt;/code&gt;下创建&lt;code class=&quot;highlighter-rouge&quot;&gt;codegen&lt;/code&gt; package。并在&lt;code class=&quot;highlighter-rouge&quot;&gt;codegen&lt;/code&gt; package下创建&lt;code class=&quot;highlighter-rouge&quot;&gt;CodeGenerator&lt;/code&gt; Object：&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;codegen&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.typesafe.config.ConfigFactory&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/**
  * Created by Nyankosensei on 18/1/24.
  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CodeGenerator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbConf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;database&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slickDriver&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slick.driver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcDriver&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jdbc.driver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;db.url&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputFolder&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;output.folder&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pkg.name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;db.user.name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;db.user.password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;slick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codegen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SourceCodeGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slickDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outputFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后我们只需要在项目中执行以下sbt命令就可以生成Tables.scala文件了。&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  mrnyanko-play-scala git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ sbt                     
sbt:mrnyanko-play-scala&amp;gt; project mrnyanko-model
sbt:mrnyanko-model&amp;gt; run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;目录结构如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala                   → Scala文件目录
 └ codegen              → codegen package
    └ CodeGenerator$    → CodeGenerator Object
 └ models               → models package
    └ Tables            → 生成的数据映射文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;一般情况下，数据库设计和架构设计都是并行的。因此大多数情况我都是先搭框架，等数据库设计完成后，再生成相应的PO。只需要通过依赖的方式把model模块依赖进来就可以了。&lt;/p&gt;

&lt;p&gt;值得注意的是官方给的&lt;a href=&quot;https://github.com/slick/slick-codegen-example&quot;&gt;slick-codegen-example&lt;/a&gt;使用的sbt版本为0.13.9我使用的是1.0.3因此有些在build.sbt的参数可能存在差异。当然定义codegen task方式有很多，除了我使用的这种官方还提供了另一种方式&lt;a href=&quot;https://github.com/slick/slick-codegen-customization-example&quot;&gt;slick-codegen-customization-example&lt;/a&gt;。实际搭建中，应注意版本问题。之前我们项目中用的是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Scala版本：2.11.8&lt;/p&gt;

  &lt;p&gt;SBT版本：0.13.8&lt;/p&gt;

  &lt;p&gt;Slick版本：3.1.1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这个项目中我用的是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Scala版本：2.12.4&lt;/p&gt;

  &lt;p&gt;SBT版本：1.0.3&lt;/p&gt;

  &lt;p&gt;Slick版本：3.2.1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;版本不同会导致一些使用上的变化，这点应该是需要特别注意的。比如说之前一个配置：&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## slick version 3.1.1
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;slick.driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;slick.driver.MySQLDriver&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在新版本中变为：&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## slick version 3.2.1
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;slick.driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;slick.jdbc.MySQLProfile&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;还有一个需要吐槽和注意的地方时，如果一个表的字断超过了22个，由于Scala Tuple最多支持22个元素，因此在生成对应的table时会生成一个Hlist的链表结构。目前我们还没有找到特别好的方法去解决这个问题。我的解决方法是，通过写一个隐式转换，将相应case calss转换成对应的PO中的链表结构的成员属性。&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TContactsShiftImplicit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tContact&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;root_.xxx.xxx.xxxxxxx.models.Tables.TContactsRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TContactsShiftRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TContactsShiftRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tContact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TContactsShiftsImplicit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tContacts&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;root_.xxx.xxx.xxxxxxx.models.Tables.TContactsRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tContacts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TContactsShiftRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TContactsShiftRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;customerIdNumber&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idNumber&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relationship&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;relationshipOthers&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;`type`&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;province&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;district&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;evaluation&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remarks&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialOrigin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;effectiveTimestamp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;java.sql.Timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auditTimestamp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;java.sql.Timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isDeleted&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TContactsShiftRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tContact&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;root_.xxx.xxx.xxxxxxx.models.Tables.TContactsRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TContactsShiftRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tContact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;customerIdNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relationship&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relationshipOthers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;typeType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;province&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;district&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evaluation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remarks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialOrigin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effectiveTimestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auditTimestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;isDeleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;TContactsShiftRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;customerIdNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relationship&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;relationshipOthers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;typeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;province&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;district&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;evaluation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remarks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;effectiveTimestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.sql.Timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auditTimestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.sql.Timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isDeleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>郝强</name></author><category term="documentation" /><category term="scala-project" /><summary type="html">关于Slick</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/scala-project-slick-0.jpeg" /></entry><entry><title type="html">搭建Scala项目——SBT篇</title><link href="http://localhost:4000/documentation/scala-project-sbt.html" rel="alternate" type="text/html" title="搭建Scala项目——SBT篇" /><published>2018-01-20T00:00:00+08:00</published><updated>2018-01-20T00:00:00+08:00</updated><id>http://localhost:4000/documentation/scala-project-sbt</id><content type="html" xml:base="http://localhost:4000/documentation/scala-project-sbt.html">&lt;h2 id=&quot;关于sbt&quot;&gt;关于SBT&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;「&lt;a href=&quot;https://www.scala-sbt.org&quot;&gt;SBT&lt;/a&gt;」&lt;/strong&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The interactive build tool。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;「SBT」&lt;/strong&gt;是一个“交互式的”（&lt;em&gt;interactive&lt;/em&gt;）构建工具。在开发过程中，使用最多的是对引入的包进行管理、定义一些task以及打包。对于Scala的项目，SBT当然是首选的build工具，但是如果项目是Java和Scala的混合项目（虽然我不喜欢混合着用），还是用Maven好一些。顺带一提，SBT的交互模式和Play Console结合起来用。&lt;/p&gt;

&lt;p&gt;在Mac上安装SBT是非常方便的只需要用home brew安装就可以了。&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install sbt@1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;创建项目&quot;&gt;创建项目&lt;/h2&gt;

&lt;p&gt;我在IDE中创建了一个名为&lt;strong&gt;「mrnyanko-play-scala」&lt;/strong&gt;的SBT项目。当然也可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;sbt new&lt;/code&gt;的命令来创建项目再import到IDE中也是没有问题的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JDK：1.8
ScalaVersion：2.12.4
SBTVersion：1.0.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;则会生成如下项目：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mrnyanko-play-scala     → 项目的基目录
 └ project              → 元构建根项目的基目录
    └ project           → 元元构建的根项目的基目录；构建定义的构建定义工程
    └ target            → target
    └ build.properties  → 设置一些SBT的属性
    └ plugins.sbt       → 配置一些需要的插件
 └ target               → target
 └ .gitignore           → git忽略文件配置
 └ build.sbt            → 是构建定义项目的一部分。
 └ README.md            → 项目介绍
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 sbt 的术语里，“基础目录”是包含项目的目录。所以，如果你创建了一个和「mrnyanko-play-scala」一样的项目 &lt;code class=&quot;highlighter-rouge&quot;&gt;mrnyanko-play-scala&lt;/code&gt; ，包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;mrnyanko-play-scala/build.sbt &lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;mrnyanko-play-scala&lt;/code&gt; 就是基础目录。&lt;/p&gt;

&lt;h2 id=&quot;拆分项目&quot;&gt;拆分项目&lt;/h2&gt;

&lt;p&gt;我打算把项目拆分成三个部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;mrnyanko-web&lt;/strong&gt;主要提供API接口和业务逻辑处理&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mrnyanko-model&lt;/strong&gt;通过slick的codegen生成数据模型&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mrnyanko-common&lt;/strong&gt;公共组建，可单独发布。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;依赖关系：&lt;strong&gt;mrnyanko-web&lt;/strong&gt; →（&lt;strong&gt;mrnyanko-model&lt;/strong&gt;，&lt;strong&gt;mrnyanko-common&lt;/strong&gt;）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name := &quot;mrnyanko-play-scala&quot;

lazy val commonSetting = Seq(
    organization := &quot;mr.nyanko&quot;,
    version := &quot;1.0.0-SNAPSHOT&quot;,
    scalaVersion := &quot;2.12.4&quot;
)

lazy val `mrnyanko-play-scala` = project in file(&quot;.&quot;) settings (commonSetting: _*)

lazy val `mrnyanko-model` = project in file(&quot;mrnyanko-model&quot;) settings (commonSetting: _*)

lazy val `mrnyanko-common` = project in file(&quot;mrnyanko-common&quot;) settings(commonSetting: _*)

lazy val `mrnyanko-web` = project in file(&quot;mrnyanko-web&quot;) settings(commonSetting: _*) enablePlugins PlayScala dependsOn (`mrnyanko-model`,`mrnyanko-common`)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样的话，如果业务有新扩展，而这种拓展不太适合放在现有的业务中那么我们就可以通过拓展新的module来满足业务需求。&lt;/p&gt;

&lt;h2 id=&quot;sbt常用命令&quot;&gt;SBT常用命令&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clean&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;删除所有生成的文件 （在 &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; 目录下）。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;编译源文件（在 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/scala&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/java&lt;/code&gt; 目录下）。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;编译和运行所有测试。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;进入到一个包含所有编译的文件和所有依赖的 classpath 的 Scala 解析器。输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;:quit&lt;/code&gt;， Ctrl+D （Unix），或者 Ctrl+Z （Windows） 返回到 sbt。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;run &amp;lt;参数&amp;gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;在和 sbt 所处的同一个虚拟机上执行项目的 main class。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;将 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/resources&lt;/code&gt; 下的文件和 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/scala&lt;/code&gt; 以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/java&lt;/code&gt;中编译出来的 class 文件打包成一个 jar 文件。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;help &amp;lt;命令&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;显示指定的命令的详细帮助信息。如果没有指定命令，会显示所有命令的简介。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reload&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;重新加载构建定义（&lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;， &lt;code class=&quot;highlighter-rouge&quot;&gt;project/*.scala&lt;/code&gt;， &lt;code class=&quot;highlighter-rouge&quot;&gt;project/*.sbt&lt;/code&gt; 这些文件中定义的内容)。在修改了构建定义文件之后需要重新加载。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;罗列项目中所有的project&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;project &amp;lt;项目名&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;在不同的项目中进行切换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;将项目打包发布至对应的仓库&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;在实际项目中，我就是按照上述的拆分方式对项目结构进行拆分的。每个module都可以单独run或者publish。这样的好处就是业务逻辑和数据模型进行了隔离，使开发人员只关注逻辑实现就可以了。有时候我也会将API单独抽离出来并创建一个名为&lt;strong&gt;xxx-dal&lt;/strong&gt;的module。把API当作一个内部网关，可以单独部署到其他服务器上，web层与dal层通过common中提供的业务对象对传输的json进行序列化与反序列化的方式进行交互，当然也可以直接操作json。这时如果业务变化，需要我们提供一个可视化的操作入口，那么DAL的module可以几乎不动，只需要在新增一个view module或者在项目之外单独做一些静态页面就能满足业务需求了。&lt;/p&gt;

&lt;p&gt;在两年前，微服务概念还没有现在成熟，公司中也没有这样的环境。虽然这样的纵向拆分方式当然也有他的局限性，不过也为未来的大方向的技术架构提供了思路。当然，作为一个规模不大的APP的server 端应该说是没有问题的。&lt;/p&gt;</content><author><name>郝强</name></author><category term="documentation" /><category term="scala-project" /><summary type="html">关于SBT</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/scala-project-sbt-0.jpeg" /></entry><entry><title type="html">搭建Scala项目——序</title><link href="http://localhost:4000/documentation/scala-project-preface.html" rel="alternate" type="text/html" title="搭建Scala项目——序" /><published>2018-01-16T00:00:00+08:00</published><updated>2018-01-16T00:00:00+08:00</updated><id>http://localhost:4000/documentation/scala-project-preface</id><content type="html" xml:base="http://localhost:4000/documentation/scala-project-preface.html">&lt;p&gt;从2016年开始接触Scala这门语言，便喜欢上了这门OO+FP混合的语言。当时公司环境也比较open，有机会用Scala开发了一些后台系统。
这些系统有些已经在生产环境跑到了现在。不过现在都在统一技术栈，很快将会变为Spring Boot的项目。并且很将会对接Spring Cloud。
这两年时间其实已经积攒了很多这方面的经验，当然期间也用Java写过一些其他的项目。临近过年，想借此机会将之前的一些经验总结一下。
不想将这些经验就流失掉了。&lt;/p&gt;

&lt;h2 id=&quot;关于scala&quot;&gt;关于Scala&lt;/h2&gt;

&lt;p&gt;使用Scala之前，工作中基本上我都是在用Java，由于一些机缘巧合，接手了一个Scala项目。从此便开始使用了他将近有一年半的时间吧。
如果想快速上手Scala这门语言的话，推荐《快学Scala》这本书，当初我就是通过看这本书快速上手的，并且在给新来的同事培训的时候也大多是基于这本书为基础的。
有过Java开发经验的能很快上手，有过其他编程经验的能更快上手，因为不会受Java的原有思维的影响。从世纪情况来开，反而应届生学习的比较快。没有太多历史包袱，而且
16年间Scala相对比较流行，大家的学习氛围也比较好。&lt;/p&gt;

&lt;p&gt;Scala语法上的进化我不想多说，因为任何脱离实际生产环境和业务的情况下去单一的去评判一个语言，这样太不客观了。学习Scala给我带来的最大的收获主要是思维模式的变换。即便在从新写Java语言的时候，也会受其影响。这里提到的影响是好的影响。在写一些设计模式或者多线程时，
能很自然的想到注意的地方，以及更抽象、更快速的处理问题。&lt;/p&gt;

&lt;h2 id=&quot;关于技术栈&quot;&gt;关于技术栈&lt;/h2&gt;

&lt;p&gt;在这一年多的时间里，用到了很多Scala相关的技术，以及原有的技术框架与Scala的结合。在结合的过程中，并没有觉得特别的别扭。在选择技术框架的时候做了调研，避免了出现那种强行结合导致变成Java和Scala混合开发，使得项目变得相当奇怪。
主要用到的技术有：Scala、SBT、Play Framework、Slick、Akka、RabbitMQ、Redis、Mongo、MySQL、ELK。
个人感觉这些框架都结合的很完美。官方也都给出了针对Reactive这种编程模式的解决方案。
在接下来的几篇博文里，我打算按照生产的要求，将这些结合起来。期间不光是写一些胶水代码将这些框架粘起来，同事也会写一些设计上的code来解决实际的生产中遇到的问题。也算是将这些时间里的沉淀积累起来吧。&lt;/p&gt;</content><author><name>郝强</name></author><category term="documentation" /><category term="scala-project" /><summary type="html">从2016年开始接触Scala这门语言，便喜欢上了这门OO+FP混合的语言。当时公司环境也比较open，有机会用Scala开发了一些后台系统。 这些系统有些已经在生产环境跑到了现在。不过现在都在统一技术栈，很快将会变为Spring Boot的项目。并且很将会对接Spring Cloud。 这两年时间其实已经积攒了很多这方面的经验，当然期间也用Java写过一些其他的项目。临近过年，想借此机会将之前的一些经验总结一下。 不想将这些经验就流失掉了。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/scala-project-preface-0.jpeg" /></entry><entry><title type="html">搭建属于自己的博客——Markdown篇</title><link href="http://localhost:4000/documentation/build-blog-markdown.html" rel="alternate" type="text/html" title="搭建属于自己的博客——Markdown篇" /><published>2018-01-12T00:00:00+08:00</published><updated>2018-01-12T00:00:00+08:00</updated><id>http://localhost:4000/documentation/build-blog-markdown</id><content type="html" xml:base="http://localhost:4000/documentation/build-blog-markdown.html">&lt;p&gt;这次我们依旧先review一下我们搭建自己的个人博客要做的三件事。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-pages.html&quot;&gt;搭建属于自己的博客——GitHub Pages篇&lt;/a&gt;」&lt;/li&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-jekyll.html&quot;&gt;搭建属于自己的博客——Jekyll篇&lt;/a&gt;」&lt;/li&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-markdown.html&quot;&gt;搭建属于自己的博客——Markdown篇&lt;/a&gt;」&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们在「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-pages.html&quot;&gt;搭建属于自己的博客——GitHub Pages篇&lt;/a&gt;」中已经在GitHub Pages上创建了属于自己主页。在「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-jekyll.html&quot;&gt;搭建属于自己的博客——Jekyll篇&lt;/a&gt;」中快速搭建了自己的个人博客，并且也将搭建好的博客发布到了之前的https://&lt;em&gt;username&lt;/em&gt;.github.io域名下接下来写第一篇自己的博文。&lt;/p&gt;

&lt;p&gt;我们可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt;文件夹下创建一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.md&lt;/code&gt;的文件。我们将使用Markdown标记语言来写我们的第一遍博文。&lt;/p&gt;

&lt;h2 id=&quot;什么是markdown&quot;&gt;什么是Markdown&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;」是一个针对web写手的文本到html转换工具。Markdown允许您使用易于阅读、易于编写的纯文本格式编写，然后将其转换为结构有效的XHTML(或HTML)。&lt;/p&gt;

&lt;h2 id=&quot;为什么选择markdown&quot;&gt;为什么选择Markdown&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;纯文本：兼容性强，所有的编辑器都能打开&lt;/li&gt;
  &lt;li&gt;内容与格式完全分离：写好的内容可以用不同的方式渲染，因此所展现给读者的只是渲染方式不同，而与内容无关。&lt;/li&gt;
  &lt;li&gt;可以轻松转换格式：即便对方看不懂原始的Markdown文件，我们可以轻松的将其转换成PDF或者HTML发布。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为目前的国内一些比较流行的论坛大多数都不支持Markdown，这也是我选择搭建自己的博客的原因之一。&lt;/p&gt;

&lt;h2 id=&quot;markdown语法&quot;&gt;Markdown语法&lt;/h2&gt;

&lt;p&gt;Markdown的语法其实非常简单，即便没有编程基础的萌新，花上30分钟也能轻松掌握。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;标题&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;#(空格)一级标题 
##(空格)二级标题
###(空格)三级标题
####(空格)四级标题
#####(空格)五级标题
######(空格)六级标题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h1 id=&quot;一级标题&quot;&gt;一级标题&lt;/h1&gt;
  &lt;h2 id=&quot;二级标题&quot;&gt;二级标题&lt;/h2&gt;
  &lt;h3 id=&quot;三级标题&quot;&gt;三级标题&lt;/h3&gt;
  &lt;h4 id=&quot;四级标题&quot;&gt;四级标题&lt;/h4&gt;
  &lt;h5 id=&quot;五级标题&quot;&gt;五级标题&lt;/h5&gt;
  &lt;h6 id=&quot;六级标题&quot;&gt;六级标题&lt;/h6&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;列表&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.(空格)内容1
2.(空格)内容2
3.(空格)内容3
或者
-(空格)内容1
-(空格)内容2
-(空格)内容3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;内容1&lt;/li&gt;
    &lt;li&gt;内容2&lt;/li&gt;
    &lt;li&gt;内容3
  或者
      &lt;ul&gt;
        &lt;li&gt;内容1&lt;/li&gt;
        &lt;li&gt;内容2&lt;/li&gt;
        &lt;li&gt;内容3&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;粗体和斜体&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;**粗体**
*斜体*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;粗体&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;普通引用&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;gt;(空格)引用内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;引用内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;代码引用&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;`&lt;code class=&quot;highlighter-rouge&quot;&gt;代码引用&lt;/code&gt;`&lt;/p&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;​```&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;多段代码引用&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;多段代码引用&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;多段代码引用&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;代码引用&lt;/code&gt;&lt;/p&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;err&quot;&gt;多段代码引用&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;多段代码引用&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;多段代码引用&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;表格&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;| 标题1   | 标题2   | 标题3   |
| —– | —– | —– |
| 内容1.1 | 内容1.2 | 内容1.3 |
| 内容2.1 | 内容2.2 | 内容2.3 |&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;标题1&lt;/th&gt;
        &lt;th&gt;标题2&lt;/th&gt;
        &lt;th&gt;标题3&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;内容1.1&lt;/td&gt;
        &lt;td&gt;内容1.2&lt;/td&gt;
        &lt;td&gt;内容1.3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;内容2.1&lt;/td&gt;
        &lt;td&gt;内容2.2&lt;/td&gt;
        &lt;td&gt;内容2.3&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;链接&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;[Markdown](https://daringfireball.net/projects/markdown/)&lt;/p&gt;

  &lt;p&gt;![build-blog-markdown-1](../assets/img/build-blog-markdown-1.jpg)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;../assets/img/build-blog-markdown-1.jpg&quot; alt=&quot;build-blog-markdown-1&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;发布我们的第一篇博文&quot;&gt;发布我们的第一篇博文&lt;/h2&gt;

&lt;p&gt;熟悉完Markdown的语法，写下第一篇博文，然后执行&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就可以在本地查看我们发布的博文啦。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/build-blog-markdown-2.png&quot; alt=&quot;build-blog-markdown-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以review一下我们文章有没有其他问题，检查完毕后，就可以将code push到remote的repository中。这样在我们的https://&lt;em&gt;username&lt;/em&gt;.github.io域名下就可以看到我们的第一篇博文了。&lt;/p&gt;

&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;

&lt;p&gt;通过这三篇文章，我们可以快速搭建起一个我们自己的博客，原始的主题比较简单，我们可以去&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll Themes&lt;/a&gt;挑选我们比较中意的主题，之后再做一些个性化的改造就可以了。另外推荐一下mac上超好用的Markdown编辑器&lt;a href=&quot;https://typora.io&quot;&gt;Typora&lt;/a&gt;。我平时都是用这款编辑器来写文章的。&lt;/p&gt;

&lt;p&gt;最后再回顾一次：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-pages.html&quot;&gt;搭建属于自己的博客——GitHub Pages篇&lt;/a&gt;」快速搭建了自己的个人站点。&lt;/li&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-jekyll.html&quot;&gt;搭建属于自己的博客——Jekyll篇&lt;/a&gt;」将简单的个人站带你快速改造成一个个人博客。&lt;/li&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-markdown.html&quot;&gt;搭建属于自己的博客——Markdown篇&lt;/a&gt;」非常便捷的发布我们的第一篇博文。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上！&lt;/p&gt;</content><author><name>郝强</name></author><category term="documentation" /><category term="blog" /><summary type="html">这次我们依旧先review一下我们搭建自己的个人博客要做的三件事。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/build-blog-markdown-0.jpeg" /></entry><entry><title type="html">搭建属于自己的博客——Jekyll篇</title><link href="http://localhost:4000/documentation/build-blog-jekyll.html" rel="alternate" type="text/html" title="搭建属于自己的博客——Jekyll篇" /><published>2018-01-08T00:00:00+08:00</published><updated>2018-01-08T00:00:00+08:00</updated><id>http://localhost:4000/documentation/build-blog-jekyll</id><content type="html" xml:base="http://localhost:4000/documentation/build-blog-jekyll.html">&lt;p&gt;我们在上一篇「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-pages.html&quot;&gt;搭建属于自己的博客——GitHub Pages篇&lt;/a&gt;」中
已经在GitHub Pages上创建了属于自己主页，当然了内容非常简单，只有一个简单的”Hello World”。
接下来我们打算用10分钟的时间将这个简单的”Hello World”页面快速的搭建好一套可以用来发布博文的博客空间。&lt;/p&gt;

&lt;p&gt;首先我们先review一遍我们要做的三件事：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-pages.html&quot;&gt;搭建属于自己的博客——GitHub Pages篇&lt;/a&gt;」&lt;/li&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-jekyll.html&quot;&gt;搭建属于自己的博客——Jekyll篇&lt;/a&gt;」&lt;/li&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-markdown.html&quot;&gt;搭建属于自己的博客——Markdown篇&lt;/a&gt;」&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本篇是搭建属于自己的博客系列的第二篇：Jekyll篇。那么就先介绍一下Jekyll。&lt;/p&gt;

&lt;h2 id=&quot;什么是jekyll&quot;&gt;什么是Jekyll？&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;」是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过 Markdown （或者 Textile） 以及 Liquid 转化成一个完整的可发布的静态网站，我们可以发布在任何你喜爱的服务器上。Jekyll 也可以运行在 GitHub Page 上，也就是说，我们可以使用 GitHub 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的。&lt;/p&gt;

&lt;h2 id=&quot;快速创建一个属于自己的博客&quot;&gt;快速创建一个属于自己的博客&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;安装Jekyll&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在Jekyll的官网中的Quick-start instructions介绍还是很简单的。&lt;img src=&quot;../assets/img/build-blog-jekyll-1.png&quot; alt=&quot;build-blog-jekyll-1&quot; /&gt;
但是由于我自己用的是mac所以还是遇到了一些特殊的问题。不过在Jekyll的官方网站上都已经给出了解决方案。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On macOS, you may need to update RubyGems (using sudo only if necessary):&lt;/p&gt;
  &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem update --system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you still have issues, you can download and install new Command Line
Tools (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt;) using the following command:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;###&lt;a href=&quot;https://jekyllrb.com/docs/troubleshooting/#jekyll--mac-os-x-1011&quot;&gt; Jekyll &amp;amp; Mac OS X 10.11&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;With the introduction of System Integrity Protection, several directoriesthat were previously writable are now considered system locations and are nolonger available. Given these changes, there are a couple of simple ways to getup and running. One option is to change the location where the gem will beinstalled (again, using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; only if necessary):&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install -n /usr/local/bin jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样我们就完成了Jekyll的安装。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建一个初始模版的博客&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new my-awesome-site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;启动服务&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-awesome-site
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/build-blog-jekyll-2.png&quot; alt=&quot;build-blog-jekyll-2&quot; /&gt;
这样我们的博客就建好啦！&lt;/p&gt;

&lt;h2 id=&quot;基本用法&quot;&gt;基本用法&lt;/h2&gt;

&lt;p&gt;安装了 Jekyll 的 Gem 包之后，就可以在命令行中使用 Jekyll 命令了。有以下这些用法：&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll build
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 当前文件夹中的内容将会生成到 ./site 文件夹中。&lt;/span&gt;

jekyll build --destination &amp;lt;destination&amp;gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 当前文件夹中的内容将会生成到目标文件夹&amp;lt;destination&amp;gt;中。&lt;/span&gt;

jekyll build --source &amp;lt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; --destination &amp;lt;destination&amp;gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 指定源文件夹&amp;lt;source&amp;gt;中的内容将会生成到目标文件夹&amp;lt;destination&amp;gt;中。&lt;/span&gt;

jekyll build --watch
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 当前文件夹中的内容将会生成到 ./site 文件夹中，&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    查看改变，并且自动再生成。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jekyll 同时也集成了一个开发用的服务器，可以让你使用浏览器在本地进行预览。&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 一个开发服务器将会运行在 http://localhost:4000/&lt;/span&gt;

jekyll serve --detach
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 功能和`jekyll serve`命令相同，但是会脱离终端在后台运行。&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    如果你想关闭服务器，可以使用`kill -9 1234`命令，&quot;1234&quot; 是进程号（PID）。&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    如果你找不到进程号，那么就用`ps aux | grep jekyll`命令来查看，然后关闭服务器。&lt;/span&gt;

jekyll serve --watch
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 和`jekyll serve`相同，但是会查看变更并且自动再生成。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;目录结构&quot;&gt;目录结构&lt;/h2&gt;

&lt;p&gt;Jekyll 的核心其实是一个文本转换引擎。它的概念其实就是： 你用你最喜欢的标记语言来写文章，可以是 Markdown，也可以是 Textile,或者就是简单的 HTML, 然后 Jekyll 就会帮你套入一个或一系列的布局中。在整个过程中你可以设置URL路径, 你的文本在布局中的显示样式等等。这些都可以通过纯文本编辑来实现，最终生成的静态页面就是你的成品了。&lt;/p&gt;

&lt;p&gt;一个基本的 Jekyll 网站的目录结构一般是像这样的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── _config.yml
├── _data
|   └── members.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.md
|   └── on-simplicity-in-technology.md
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md
|   └── 2009-04-26-barcamp-boston-4-roundup.md
├── _sass
|   ├── _base.scss
|   └── _layout.scss
├── _site
├── .jekyll-metadata
└── index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;来看看这些都有什么用：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;文件 / 目录&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;保存配置数据。很多配置选项都会直接从命令行中进行设置，但是如果你把那些配置写在这儿，你就不用非要去记住那些命令了。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_drafts&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;drafts 是未发布的文章。这些文件的格式中都没有 &lt;code class=&quot;highlighter-rouge&quot;&gt;title.MARKUP&lt;/code&gt; 数据。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;你可以加载这些包含部分到你的布局或者文章中以方便重用。可以用这个标签&lt;code class=&quot;highlighter-rouge&quot;&gt;include file.ext &lt;/code&gt;来把文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/file.ext&lt;/code&gt; 包含进来。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;layouts 是包裹在文章外部的模板。布局可以在YAML头信息中根据不同文章进行选择。这将在下一个部分进行介绍。标签  &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; 可以将content插入页面中。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这里放的就是你的文章了。文件格式很重要，必须要符合:&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;。The permalinks可以在文章中自己定制，但是数据和标记语言都是根据文件名来确定的。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_data&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;一般都会存放&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.yml&lt;/code&gt;文件，其中会又一些对于网站的配置。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;一旦 Jekyll 完成转换，就会将生成的页面放在这里（默认）。最好将这个目录放进你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件中。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; and other HTML, Markdown, Textile files&lt;/td&gt;
      &lt;td&gt;如果这些文件中包含YAML头信息部分，Jekyll 就会自动将它们进行转换。当然，其他的如 &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.markdown&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;.textile&lt;/code&gt; 等在你的站点根目录下或者不是以上提到的目录中的文件也会被转换。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Other Files/Folders&lt;/td&gt;
      &lt;td&gt;其他一些未被提及的目录和文件如&lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt; 还有 &lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt; 文件夹，&lt;code class=&quot;highlighter-rouge&quot;&gt;favicon.ico&lt;/code&gt; 等文件都将被完全拷贝到生成的 site 中。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;将内容发布到自己的usernamegithubio域名下&quot;&gt;将内容发布到自己的&lt;em&gt;username&lt;/em&gt;.github.io域名下&lt;/h2&gt;

&lt;p&gt;好啦，关于Jekyll的详细介绍就不再本文中赘述了，有什么问题都可以去看&lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;Jekyll的官方文档&lt;/a&gt;。
我们只要简单的会用Jekyll来搭建我们的博客网站，并且发布我们的博文就好了。
接下来我们只要将生成好的文件push到自己的&lt;em&gt;username&lt;/em&gt;.github.io的repository中，我们的网站就会自动发布到&lt;em&gt;username&lt;/em&gt;.github.io域名下。
值得注意的是：通常情况下我们会把&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;目录下的内容加入到&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;文件中，因为在&lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt;中的markdown文件会在远程自动生成到&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;的HTML页面。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-pages.html&quot;&gt;搭建属于自己的博客——GitHub Pages篇&lt;/a&gt;」介绍了在使用GitHub Pages来创建自己的主页。「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-jekyll.html&quot;&gt;搭建属于自己的博客——Jekyll篇&lt;/a&gt;」介绍了如何在本地快速生成自己的博客并快速上传到自己的&lt;em&gt;username&lt;/em&gt;.github.io域名下。接下来我们要通过「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-markdown.html&quot;&gt;搭建属于自己的博客——Markdown篇&lt;/a&gt;」来学习Markdown语法，来编写我们的博文。敬请期待吧！&lt;/p&gt;</content><author><name>郝强</name></author><category term="documentation" /><category term="blog" /><summary type="html">我们在上一篇「搭建属于自己的博客——GitHub Pages篇」中 已经在GitHub Pages上创建了属于自己主页，当然了内容非常简单，只有一个简单的”Hello World”。 接下来我们打算用10分钟的时间将这个简单的”Hello World”页面快速的搭建好一套可以用来发布博文的博客空间。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/build-blog-jekyll-0.jpeg" /></entry><entry><title type="html">搭建属于自己的博客——GitHub Pages篇</title><link href="http://localhost:4000/documentation/build-blog-pages.html" rel="alternate" type="text/html" title="搭建属于自己的博客——GitHub Pages篇" /><published>2018-01-04T00:00:00+08:00</published><updated>2018-01-04T00:00:00+08:00</updated><id>http://localhost:4000/documentation/build-blog-pages</id><content type="html" xml:base="http://localhost:4000/documentation/build-blog-pages.html">&lt;p&gt;作为第一篇分享的技术类文章，打算从如何搭建这个个人博客说起。想必每一名程序员都想拥有自己的博客，大致上无外乎以下三种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在某个技术论坛扎根&lt;/li&gt;
  &lt;li&gt;自己买空间&lt;/li&gt;
  &lt;li&gt;在GitHub Pages上搭建自己的个人主页&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从我个人的考虑还是倾向于第三种，第一种不太适合我是因为目前支持markdown的论坛比较少，还没找到合适的。
第二种需要自己买空间，花钱倒不是主要问题，问题是维护成本有点高，而且买了空间，只用搭建自己的博客感觉有点浪费……
所以最后决定是用GitHub Pages+Jekyll+Markdown来搭建自己的个人博客。&lt;/p&gt;

&lt;p&gt;因此，打算分别用三个篇章来介绍如何搭建自己的个人博客。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-pages.html&quot;&gt;搭建属于自己的博客——GitHub Pages篇&lt;/a&gt;」&lt;/li&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-jekyll.html&quot;&gt;搭建属于自己的博客——Jekyll篇&lt;/a&gt;」&lt;/li&gt;
  &lt;li&gt;「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-markdown.html&quot;&gt;搭建属于自己的博客——Markdown篇&lt;/a&gt;」&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;什么是github-pages&quot;&gt;什么是GitHub Pages?&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;」是一个静态站点托管服务。&lt;/p&gt;

&lt;p&gt;GitHub Pages的设计目的是直接从GitHub库中托管我们的个人、组织或项目页面。
我们可以使用Jekyll主题选择器在网上创建和发布GitHub页面。如果喜欢在本地工作，可以使用GitHub桌面或命令行。&lt;/p&gt;

&lt;p&gt;其实最重要的是GitHub Pages支持了我们可以直接在自己的GitHub上的repository上创建一个project，这个project就是我们的个人主页的项目。
只要我们去把记得写的博文push到这个project，就可以直接发布到对应的自己的个人主页或者项目主页上。这是一个非常方便的操作。比方说我们有一些自己写过的project
必然要有一个汇总的介绍，除了每个project中要有自己的页面做介绍外，还应该有一个个人主页。那么我只需要建立一个以我的GitHub的username.github.io的repository
那么这个代码仓库中的pages就会自动发布到我们的个人主页上。&lt;/p&gt;

&lt;h2 id=&quot;快速创建一个属于自己的站点&quot;&gt;快速创建一个属于自己的站点&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先要有一个自己的GitHub账号。作为一个程序员，大家应该都有自己的GitHub账号吧。如果还没有快去注册一个吧。「&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;」&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接下来我们在自己的账号下要创建一个repository。这个repository名称是有要求的，需要以&lt;em&gt;username&lt;/em&gt;.github.io来命名，其中username是我们的GitHub账号名称。&lt;img src=&quot;../assets/img/build-blog-pages-1.png&quot; alt=&quot;build-blog-pages-1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建完成后，GitHub会生成我们刚刚创建的repository的连接。接下来需要复制这个连接，打开terminal，将项目clone下来。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;git clone https://github.com/&lt;em&gt;username&lt;/em&gt;/&lt;em&gt;username&lt;/em&gt;.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;继续进入到local的项目中，创建一个带有”Hello World“内容的index.html&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;cd &lt;em&gt;username&lt;/em&gt;.github.io&lt;/p&gt;

  &lt;p&gt;echo “Hello World” &amp;gt; index.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;最后将我们的个人首页push到remote的repository中。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;git add –all&lt;/p&gt;

  &lt;p&gt;git commit -m “Initial commit”&lt;/p&gt;

  &lt;p&gt;git push -u origin master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;搞定！接下来在浏览器就可以直接访问我们的个人主页啦！&lt;strong&gt;https://username.github.io&lt;/strong&gt;。
&lt;img src=&quot;../assets/img/build-blog-pages-2.png&quot; alt=&quot;build-blog-pages-2&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本编我们花了10分钟就快速搭建完了自己的个人主页，不过我们可以看到，还是一个很简单的首页。离我们想要的属于自己的博客还有一段距离，不过没关系，接下来的「&lt;a href=&quot;http://localhost:4000/documentation/build-blog-jekyll.html&quot;&gt;搭建属于自己的博客——Jekyll篇&lt;/a&gt;」
中我们将会花10分钟快速生成我们的博客，敬请期待吧！&lt;/p&gt;</content><author><name>郝强</name></author><category term="documentation" /><category term="blog" /><summary type="html">作为第一篇分享的技术类文章，打算从如何搭建这个个人博客说起。想必每一名程序员都想拥有自己的博客，大致上无外乎以下三种：</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/build-blog-pages-0.jpeg" /></entry></feed>